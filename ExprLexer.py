# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,237,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,5,0,72,8,0,10,0,12,0,75,9,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,16,3,16,162,8,16,1,16,4,16,165,8,16,11,
        16,12,16,166,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,3,19,182,8,19,1,20,1,20,1,20,1,20,1,20,3,20,189,8,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,212,8,29,10,29,12,29,
        215,9,29,1,29,1,29,1,30,4,30,220,8,30,11,30,12,30,221,1,30,1,30,
        1,31,1,31,5,31,228,8,31,10,31,12,31,231,9,31,1,32,4,32,234,8,32,
        11,32,12,32,235,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,1,0,10,3,0,10,10,13,13,47,47,1,0,45,45,1,0,48,57,2,0,43,
        43,45,45,2,0,42,42,47,47,2,0,60,60,62,62,1,0,39,39,3,0,9,10,13,13,
        32,32,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,249,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,78,1,0,0,0,5,86,1,0,0,0,
        7,94,1,0,0,0,9,102,1,0,0,0,11,108,1,0,0,0,13,112,1,0,0,0,15,118,
        1,0,0,0,17,121,1,0,0,0,19,126,1,0,0,0,21,130,1,0,0,0,23,136,1,0,
        0,0,25,141,1,0,0,0,27,147,1,0,0,0,29,150,1,0,0,0,31,155,1,0,0,0,
        33,161,1,0,0,0,35,168,1,0,0,0,37,170,1,0,0,0,39,181,1,0,0,0,41,188,
        1,0,0,0,43,190,1,0,0,0,45,192,1,0,0,0,47,194,1,0,0,0,49,196,1,0,
        0,0,51,198,1,0,0,0,53,200,1,0,0,0,55,202,1,0,0,0,57,204,1,0,0,0,
        59,207,1,0,0,0,61,219,1,0,0,0,63,225,1,0,0,0,65,233,1,0,0,0,67,68,
        5,47,0,0,68,69,5,47,0,0,69,73,1,0,0,0,70,72,8,0,0,0,71,70,1,0,0,
        0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,73,
        1,0,0,0,76,77,6,0,0,0,77,2,1,0,0,0,78,79,5,80,0,0,79,80,5,82,0,0,
        80,81,5,79,0,0,81,82,5,71,0,0,82,83,5,82,0,0,83,84,5,65,0,0,84,85,
        5,77,0,0,85,4,1,0,0,0,86,87,5,73,0,0,87,88,5,78,0,0,88,89,5,84,0,
        0,89,90,5,69,0,0,90,91,5,71,0,0,91,92,5,69,0,0,92,93,5,82,0,0,93,
        6,1,0,0,0,94,95,5,66,0,0,95,96,5,79,0,0,96,97,5,79,0,0,97,98,5,76,
        0,0,98,99,5,69,0,0,99,100,5,65,0,0,100,101,5,78,0,0,101,8,1,0,0,
        0,102,103,5,66,0,0,103,104,5,69,0,0,104,105,5,71,0,0,105,106,5,73,
        0,0,106,107,5,78,0,0,107,10,1,0,0,0,108,109,5,69,0,0,109,110,5,78,
        0,0,110,111,5,68,0,0,111,12,1,0,0,0,112,113,5,87,0,0,113,114,5,72,
        0,0,114,115,5,73,0,0,115,116,5,76,0,0,116,117,5,69,0,0,117,14,1,
        0,0,0,118,119,5,68,0,0,119,120,5,79,0,0,120,16,1,0,0,0,121,122,5,
        82,0,0,122,123,5,69,0,0,123,124,5,65,0,0,124,125,5,68,0,0,125,18,
        1,0,0,0,126,127,5,86,0,0,127,128,5,65,0,0,128,129,5,82,0,0,129,20,
        1,0,0,0,130,131,5,70,0,0,131,132,5,65,0,0,132,133,5,76,0,0,133,134,
        5,83,0,0,134,135,5,69,0,0,135,22,1,0,0,0,136,137,5,84,0,0,137,138,
        5,82,0,0,138,139,5,85,0,0,139,140,5,69,0,0,140,24,1,0,0,0,141,142,
        5,87,0,0,142,143,5,82,0,0,143,144,5,73,0,0,144,145,5,84,0,0,145,
        146,5,69,0,0,146,26,1,0,0,0,147,148,5,73,0,0,148,149,5,70,0,0,149,
        28,1,0,0,0,150,151,5,84,0,0,151,152,5,72,0,0,152,153,5,69,0,0,153,
        154,5,78,0,0,154,30,1,0,0,0,155,156,5,69,0,0,156,157,5,76,0,0,157,
        158,5,83,0,0,158,159,5,69,0,0,159,32,1,0,0,0,160,162,7,1,0,0,161,
        160,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,165,7,2,0,0,164,
        163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,
        34,1,0,0,0,168,169,7,3,0,0,169,36,1,0,0,0,170,171,7,4,0,0,171,38,
        1,0,0,0,172,182,7,5,0,0,173,174,5,62,0,0,174,182,5,61,0,0,175,176,
        5,60,0,0,176,182,5,61,0,0,177,178,5,61,0,0,178,182,5,61,0,0,179,
        180,5,60,0,0,180,182,5,62,0,0,181,172,1,0,0,0,181,173,1,0,0,0,181,
        175,1,0,0,0,181,177,1,0,0,0,181,179,1,0,0,0,182,40,1,0,0,0,183,184,
        5,79,0,0,184,189,5,82,0,0,185,186,5,65,0,0,186,187,5,78,0,0,187,
        189,5,68,0,0,188,183,1,0,0,0,188,185,1,0,0,0,189,42,1,0,0,0,190,
        191,5,126,0,0,191,44,1,0,0,0,192,193,5,59,0,0,193,46,1,0,0,0,194,
        195,5,46,0,0,195,48,1,0,0,0,196,197,5,58,0,0,197,50,1,0,0,0,198,
        199,5,44,0,0,199,52,1,0,0,0,200,201,5,40,0,0,201,54,1,0,0,0,202,
        203,5,41,0,0,203,56,1,0,0,0,204,205,5,58,0,0,205,206,5,61,0,0,206,
        58,1,0,0,0,207,213,5,39,0,0,208,209,5,39,0,0,209,212,5,39,0,0,210,
        212,8,6,0,0,211,208,1,0,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,
        211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,
        217,5,39,0,0,217,60,1,0,0,0,218,220,7,7,0,0,219,218,1,0,0,0,220,
        221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,
        224,6,30,0,0,224,62,1,0,0,0,225,229,7,8,0,0,226,228,7,9,0,0,227,
        226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
        64,1,0,0,0,231,229,1,0,0,0,232,234,7,2,0,0,233,232,1,0,0,0,234,235,
        1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,66,1,0,0,0,11,0,73,161,
        166,181,188,211,213,221,229,235,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 1
    PROGRAM = 2
    INTEGER = 3
    BOOLEAN = 4
    BEGIN = 5
    END = 6
    WHILE = 7
    DO = 8
    READ = 9
    VAR = 10
    FALSE = 11
    TRUE = 12
    WRITE = 13
    IF = 14
    THEN = 15
    ELSE = 16
    INT = 17
    OPAD = 18
    OPMULT = 19
    OPREL = 20
    OPLOG = 21
    OPNEG = 22
    PVIG = 23
    PONTO = 24
    DPONTOS = 25
    VIG = 26
    ABPAR = 27
    FPAR = 28
    ATRIB = 29
    CADEIA = 30
    WS = 31
    ID = 32
    CTE = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROGRAM'", "'INTEGER'", "'BOOLEAN'", "'BEGIN'", "'END'", "'WHILE'", 
            "'DO'", "'READ'", "'VAR'", "'FALSE'", "'TRUE'", "'WRITE'", "'IF'", 
            "'THEN'", "'ELSE'", "'~'", "';'", "'.'", "':'", "','", "'('", 
            "')'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", 
            "WHILE", "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", "IF", 
            "THEN", "ELSE", "INT", "OPAD", "OPMULT", "OPREL", "OPLOG", "OPNEG", 
            "PVIG", "PONTO", "DPONTOS", "VIG", "ABPAR", "FPAR", "ATRIB", 
            "CADEIA", "WS", "ID", "CTE" ]

    ruleNames = [ "COMMENT", "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", 
                  "WHILE", "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", 
                  "IF", "THEN", "ELSE", "INT", "OPAD", "OPMULT", "OPREL", 
                  "OPLOG", "OPNEG", "PVIG", "PONTO", "DPONTOS", "VIG", "ABPAR", 
                  "FPAR", "ATRIB", "CADEIA", "WS", "ID", "CTE" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


